/********************************************************************
 * The iTCH project - Copyright (c) 2007-2011 Dustin Graves
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/

package iTCH;

// Protocol version (probably not recommended use of enumerations)
// Used to announce version of protocol used by client/server during handshake 
enum Version {
  PROTOCOL_VERSION = 0;
}

// Client/server hello message for handshaking
message Hello {
  required Version version = 1 [default = PROTOCOL_VERSION];
  optional string hostname = 2;
  optional string program_name = 3;
  optional string program_version = 4;
}

// Message container for client and server message types
message Envelope {
  enum Type {
    CLIENTREQUEST = 0;
    SERVERSTATUS = 1;
  }
  
  required Type type = 1;
  optional ClientRequest request = 2;
  optional ServerStatus status = 3;
}

// Request to be sent from client to server
message ClientRequest {
  enum Type {
    BACKTRACK           = 0;     // No value is returned
    FASTFORWARD         = 1;     // No value is returned
    NEXTTRACK           = 2;     // No value is returned
    PAUSE               = 3;     // No value is returned
    PLAY                = 4;     // No value is returned
    PLAYPAUSE           = 5;     // No value is returned
    PREVIOUSTRACK       = 6;     // No value is returned
    RESUME              = 7;     // No value is returned
    REWIND              = 8;     // No value is returned
    STOP                = 9;     // No value is returned
    GET_SOUNDVOLUME     = 10;    // Returns a long (0-100%)
    PUT_SOUNDVOLUME     = 11;    // Takes a long (0-100%); No value is returned
    GET_MUTE            = 12;    // Returns a bool
    PUT_MUTE            = 13;    // Takes a bool; No value is returned
    GET_PLAYERPOSITION  = 14;    // Returns a long (0-100%)
    PUT_PLAYERPOSITION  = 15;    // Takes a long (0-100%); No value is returned
    GET_PLAYERSTATE     = 16;    // Returns player state enumeration value (generated from ITPlayserState)
    GET_CURRENTTRACK    = 17;    // Returns a track message (generated from IITTrack)
    GET_CURRENTPLAYLIST = 18;    // Returns a list of track messages sorted by play order (generated from IITTrackCollection member of IITPlaylist)
  }

  message Value {
    enum Type {
	  VOLUME = 0;
	  MUTE = 1;
	  POSITION = 2;
	}

	required Type type = 1;
    optional uint32 volume = 2;
    optional bool mute = 3;
    optional uint32 position = 4;
  }
  
  required uint32 seqid = 1;        // Sequence ID, should be matched by associated response (when response is requested)
  required Type type = 2;           // Type of action to perform
  optional Value value = 3;         // Value supporting action
}

// Message describing a track
message Track {
  required string name = 1;
  required string artist = 2;
  required string album = 3;
  required uint32 duration = 4;
  required string genre = 5;
  required uint32 year = 6;                 // Year recorded/released
  optional uint32 bitrate = 7;              // Bit rate of track in kbps
  optional uint32 sample_rate = 8;          // Sample rate of track in Hz
  optional string comment = 9;              // Free-form comment on track
  optional string kind = 10;                // Text description of the track
}

// Enumeration describing the iTunes player state
enum PlayerState {
 UNKNOWN = 0;
 STOPPED = 1;
 PLAYING = 2;
 FASTFORWARD = 3;
 REWIND = 4;
}

// Server status messages sent to client, either as a response to a client request
// or a result of a player state change
message ServerStatus {
  enum Type {
    SOUNDVOLUME = 0;
    MUTE = 1;
    PLAYERPOSITION = 2;
    PLAYERSTATE = 3;
    CURRENTTRACK = 4;
    CURRENTPLAYLIST = 5;
  }

  message Value {
    enum Type {
	  VOLUME = 0;
	  MUTE = 1;
	  POSITION = 2;
	  STATE = 3;
	  TRACK = 4;
	}

	required Type type = 1;
    optional uint32 volume = 2;
    optional bool mute = 3;
    optional uint32 position = 4;
	optional PlayerState state = 5;
	repeated Track track = 6;
  }

  required Type type = 1;
  required uint32 seqid = 2 [default = 0];  // Sequence ID, will be 0 for player generated state change or sequence ID from the ClientRequest to which this is a response
  required Value value = 3;
}
