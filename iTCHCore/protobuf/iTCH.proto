/********************************************************************
 * The iTCH project - Copyright (c) 2007-2011 Dustin Graves
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/

package iTCH;

// Protocol version (probably not recommended use of enumerations)
// Used to announce version of protocol used by client/server during handshake 
enum Version {
  PROTOCOL_VERSION = 0;
}

// Client/server hello message for handshaking
message Hello {
  required Version version = 1 [default = PROTOCOL_VERSION];
  optional string hostname = 2;
  optional string program_name = 3;
  optional string program_version = 4;
}

// Message container for client and server message types
message Envelope {
  enum Type {
    SERVERNOTIFICATION = 0;
    CLIENTREQUEST = 1;
    SERVERRESPONSE = 2;
  }
  
  required Type type = 1;
  optional ServerNotification notification = 2;
  optional ClientRequest request = 3;
  optional ServerResponse response = 4;
}

// Notification that the player state has changed to be sent by server to client
// Server does not send any additional data; client is expected to request data
// related to the notification if interested
message ServerNotification {
  enum Type {
    VOLUMECHANGED    = 0;    // Sends a volume changed message to client; No response
    PLAYINGSTARTED   = 1;    // Sends a playing started notification to client; No response
    PLAYINGSTOPPED   = 2;    // Sends a playing stopped notification to client; No response
    TRACKINFOCHANGED = 3;    // Sends a notification that the currently playing track's info has changed to client; No response
  }

  required Type type = 1;
}

// Request to be sent from client to server
message ClientRequest {
  enum Type {
    BACKTRACK              = 0;     // No value is returned
    FASTFORWARD            = 1;     // No value is returned
    NEXTTRACK              = 2;     // No value is returned
    PAUSE                  = 3;     // No value is returned
    PLAY                   = 4;     // No value is returned
    PLAYPAUSE              = 5;     // No value is returned
    PREVIOUSTRACK          = 6;     // No value is returned
    RESUME                 = 7;     // No value is returned
    REWIND                 = 8;     // No value is returned
    STOP                   = 9;     // No value is returned
    GET_SOUNDVOLUME        = 10;    // Returns a long (0-100%)
    PUT_SOUNDVOLUME        = 11;    // Takes a long (0-100%); No value is returned
    GET_MUTE               = 12;    // Returns a bool
    PUT_MUTE               = 13;    // Takes a bool; No value is returned
    GET_PLAYERPOSITION     = 14;    // Returns a long (0-100%)
    PUT_PLAYERPOSITION     = 15;    // Takes a long (0-100%); No value is returned
    GET_PLAYERSTATE        = 16;    // Returns player state enumeration value (generated from ITPlayserState)
    GET_CURRENTTRACK       = 17;    // Returns a track message (generated from IITTrack)
    GET_CURRENTPLAYLIST    = 18;    // Returns a list of track messages sorted by play order (generated from IITTrackCollection member of IITPlaylist)
    GET_PLAYERBUTTONSSTATE = 19;    // Returns the states of the previous, play/pause/stop, and next buttons
  }

  message Value {
    enum Type {
	  VOLUME = 0;
	  MUTE = 1;
	  POSITION = 2;
	}

	required Type type = 1;
    optional uint32 volume = 2;
    optional bool mute = 3;
    optional uint32 position = 4;
  }
  
  required uint32 seqid = 1;        // Sequence ID, should be matched by associated response (when response is requested)
  required Type type = 2;           // Type of action to perform
  optional Value value = 3;         // Value supporting action
}

// Enumeration describing the player state
enum PlayerState {
  STOPPED = 0;
  PLAYING = 1;
  FASTFORWARD = 2;
  REWIND = 3;
}

// Enumeration describing the state of the play button
enum PlayButtonState {
  PLAY_DISABLED = 0;
  PLAY_ENABLED = 1;
  PAUSE_ENABLED = 2;
  PAUSE_DISABLED = 3;
  STOP_ENABLED = 4;
  STOP_DISABLED = 5;
}

// Message containing the states of all buttons on the player
message PlayerButtonsState
{
  required PlayButtonState play_pause_stop_state = 1 [default = PLAY_ENABLED];
  required bool previous_enabled = 2 [default = false];
  required bool next_enabled = 3 [default = false];
}

// Message describing a track
message Track {
  required string name = 1;
  required string artist = 2;
  required string album = 3;
  required uint32 duration = 4;
  required string genre = 5;
  required uint32 year = 6;                 // Year recorded/released
  optional uint32 bitrate = 7;              // Bit rate of track in kbps
  optional uint32 sample_rate = 8;          // Sample rate of track in Hz
  optional string comment = 9;              // Free-form comment on track
  optional string kind = 10;                // Text description of the track
}

// Response to client request sent from server to client
// A response is generated for every client request, indicating success or failure
// Only 'get' requests generate a response with a valie
message ServerResponse {
  message Value {
    enum Type {
	  VOLUME = 0;
	  MUTE = 1;
	  POSITION = 2;
	  STATE = 3;
	  TRACK = 4;
	  PLAYLIST = 5;
	  BUTTONS = 6;
	}

	required Type type = 1;
    optional uint32 volume = 2;
    optional bool mute = 3;
    optional uint32 position = 4;
	optional PlayerState state = 5;
	optional Track track = 6;
	repeated Track playlist = 7;
	optional PlayerButtonsState buttons = 8;
  }

  required uint32 seqid = 1 [default = 0];  // Sequence ID, will be 0 for player generated state change or sequence ID from the ClientRequest to which this is a response
  required bool success = 2;                // Indicates success or failure of ClientRequest processing
  optional string error_message = 3;        // Present if success is false to explain failure
  optional Value value = 4;
}
