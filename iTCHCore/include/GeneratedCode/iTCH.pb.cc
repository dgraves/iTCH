// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "iTCH.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace iTCH {

namespace {

const ::google::protobuf::Descriptor* Hello_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Hello_reflection_ = NULL;
const ::google::protobuf::Descriptor* Envelope_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Envelope_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Envelope_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ClientRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientRequest_Value_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientRequest_Value_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ClientRequest_Value_Type_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ClientRequest_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Track_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Track_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServerStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServerStatus_Value_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerStatus_Value_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ServerStatus_Value_Type_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ServerStatus_Type_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Version_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* PlayerState_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_iTCH_2eproto() {
  protobuf_AddDesc_iTCH_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "iTCH.proto");
  GOOGLE_CHECK(file != NULL);
  Hello_descriptor_ = file->message_type(0);
  static const int Hello_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hello, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hello, hostname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hello, program_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hello, program_version_),
  };
  Hello_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Hello_descriptor_,
      Hello::default_instance_,
      Hello_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hello, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hello, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Hello));
  Envelope_descriptor_ = file->message_type(1);
  static const int Envelope_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Envelope, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Envelope, request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Envelope, status_),
  };
  Envelope_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Envelope_descriptor_,
      Envelope::default_instance_,
      Envelope_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Envelope, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Envelope, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Envelope));
  Envelope_Type_descriptor_ = Envelope_descriptor_->enum_type(0);
  ClientRequest_descriptor_ = file->message_type(2);
  static const int ClientRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientRequest, seqid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientRequest, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientRequest, value_),
  };
  ClientRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientRequest_descriptor_,
      ClientRequest::default_instance_,
      ClientRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientRequest));
  ClientRequest_Value_descriptor_ = ClientRequest_descriptor_->nested_type(0);
  static const int ClientRequest_Value_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientRequest_Value, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientRequest_Value, volume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientRequest_Value, mute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientRequest_Value, position_),
  };
  ClientRequest_Value_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientRequest_Value_descriptor_,
      ClientRequest_Value::default_instance_,
      ClientRequest_Value_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientRequest_Value, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientRequest_Value, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientRequest_Value));
  ClientRequest_Value_Type_descriptor_ = ClientRequest_Value_descriptor_->enum_type(0);
  ClientRequest_Type_descriptor_ = ClientRequest_descriptor_->enum_type(0);
  Track_descriptor_ = file->message_type(3);
  static const int Track_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Track, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Track, artist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Track, album_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Track, duration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Track, genre_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Track, year_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Track, bitrate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Track, sample_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Track, comment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Track, kind_),
  };
  Track_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Track_descriptor_,
      Track::default_instance_,
      Track_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Track, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Track, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Track));
  ServerStatus_descriptor_ = file->message_type(4);
  static const int ServerStatus_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerStatus, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerStatus, seqid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerStatus, value_),
  };
  ServerStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServerStatus_descriptor_,
      ServerStatus::default_instance_,
      ServerStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServerStatus));
  ServerStatus_Value_descriptor_ = ServerStatus_descriptor_->nested_type(0);
  static const int ServerStatus_Value_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerStatus_Value, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerStatus_Value, volume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerStatus_Value, mute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerStatus_Value, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerStatus_Value, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerStatus_Value, track_),
  };
  ServerStatus_Value_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServerStatus_Value_descriptor_,
      ServerStatus_Value::default_instance_,
      ServerStatus_Value_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerStatus_Value, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerStatus_Value, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServerStatus_Value));
  ServerStatus_Value_Type_descriptor_ = ServerStatus_Value_descriptor_->enum_type(0);
  ServerStatus_Type_descriptor_ = ServerStatus_descriptor_->enum_type(0);
  Version_descriptor_ = file->enum_type(0);
  PlayerState_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_iTCH_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Hello_descriptor_, &Hello::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Envelope_descriptor_, &Envelope::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientRequest_descriptor_, &ClientRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientRequest_Value_descriptor_, &ClientRequest_Value::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Track_descriptor_, &Track::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServerStatus_descriptor_, &ServerStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServerStatus_Value_descriptor_, &ServerStatus_Value::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_iTCH_2eproto() {
  delete Hello::default_instance_;
  delete Hello_reflection_;
  delete Envelope::default_instance_;
  delete Envelope_reflection_;
  delete ClientRequest::default_instance_;
  delete ClientRequest_reflection_;
  delete ClientRequest_Value::default_instance_;
  delete ClientRequest_Value_reflection_;
  delete Track::default_instance_;
  delete Track_reflection_;
  delete ServerStatus::default_instance_;
  delete ServerStatus_reflection_;
  delete ServerStatus_Value::default_instance_;
  delete ServerStatus_Value_reflection_;
}

void protobuf_AddDesc_iTCH_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\niTCH.proto\022\004iTCH\"z\n\005Hello\0220\n\007version\030\001"
    " \002(\0162\r.iTCH.Version:\020PROTOCOL_VERSION\022\020\n"
    "\010hostname\030\002 \001(\t\022\024\n\014program_name\030\003 \001(\t\022\027\n"
    "\017program_version\030\004 \001(\t\"\244\001\n\010Envelope\022!\n\004t"
    "ype\030\001 \002(\0162\023.iTCH.Envelope.Type\022$\n\007reques"
    "t\030\002 \001(\0132\023.iTCH.ClientRequest\022\"\n\006status\030\003"
    " \001(\0132\022.iTCH.ServerStatus\"+\n\004Type\022\021\n\rCLIE"
    "NTREQUEST\020\000\022\020\n\014SERVERSTATUS\020\001\"\317\004\n\rClient"
    "Request\022\r\n\005seqid\030\001 \002(\r\022&\n\004type\030\002 \002(\0162\030.i"
    "TCH.ClientRequest.Type\022(\n\005value\030\003 \001(\0132\031."
    "iTCH.ClientRequest.Value\032\221\001\n\005Value\022,\n\004ty"
    "pe\030\001 \002(\0162\036.iTCH.ClientRequest.Value.Type"
    "\022\016\n\006volume\030\002 \001(\r\022\014\n\004mute\030\003 \001(\010\022\020\n\010positi"
    "on\030\004 \001(\r\"*\n\004Type\022\n\n\006VOLUME\020\000\022\010\n\004MUTE\020\001\022\014"
    "\n\010POSITION\020\002\"\310\002\n\004Type\022\r\n\tBACKTRACK\020\000\022\017\n\013"
    "FASTFORWARD\020\001\022\r\n\tNEXTTRACK\020\002\022\t\n\005PAUSE\020\003\022"
    "\010\n\004PLAY\020\004\022\r\n\tPLAYPAUSE\020\005\022\021\n\rPREVIOUSTRAC"
    "K\020\006\022\n\n\006RESUME\020\007\022\n\n\006REWIND\020\010\022\010\n\004STOP\020\t\022\023\n"
    "\017GET_SOUNDVOLUME\020\n\022\023\n\017PUT_SOUNDVOLUME\020\013\022"
    "\014\n\010GET_MUTE\020\014\022\014\n\010PUT_MUTE\020\r\022\026\n\022GET_PLAYE"
    "RPOSITION\020\016\022\026\n\022PUT_PLAYERPOSITION\020\017\022\023\n\017G"
    "ET_PLAYERSTATE\020\020\022\024\n\020GET_CURRENTTRACK\020\021\022\027"
    "\n\023GET_CURRENTPLAYLIST\020\022\"\250\001\n\005Track\022\014\n\004nam"
    "e\030\001 \002(\t\022\016\n\006artist\030\002 \002(\t\022\r\n\005album\030\003 \002(\t\022\020"
    "\n\010duration\030\004 \002(\r\022\r\n\005genre\030\005 \002(\t\022\014\n\004year\030"
    "\006 \002(\r\022\017\n\007bitrate\030\007 \001(\r\022\023\n\013sample_rate\030\010 "
    "\001(\r\022\017\n\007comment\030\t \001(\t\022\014\n\004kind\030\n \001(\t\"\306\003\n\014S"
    "erverStatus\022%\n\004type\030\001 \002(\0162\027.iTCH.ServerS"
    "tatus.Type\022\020\n\005seqid\030\002 \002(\r:\0010\022\'\n\005value\030\003 "
    "\002(\0132\030.iTCH.ServerStatus.Value\032\344\001\n\005Value\022"
    "+\n\004type\030\001 \002(\0162\035.iTCH.ServerStatus.Value."
    "Type\022\016\n\006volume\030\002 \001(\r\022\014\n\004mute\030\003 \001(\010\022\020\n\010po"
    "sition\030\004 \001(\r\022 \n\005state\030\005 \001(\0162\021.iTCH.Playe"
    "rState\022\032\n\005track\030\006 \003(\0132\013.iTCH.Track\"@\n\004Ty"
    "pe\022\n\n\006VOLUME\020\000\022\010\n\004MUTE\020\001\022\014\n\010POSITION\020\002\022\t"
    "\n\005STATE\020\003\022\t\n\005TRACK\020\004\"m\n\004Type\022\017\n\013SOUNDVOL"
    "UME\020\000\022\010\n\004MUTE\020\001\022\022\n\016PLAYERPOSITION\020\002\022\017\n\013P"
    "LAYERSTATE\020\003\022\020\n\014CURRENTTRACK\020\004\022\023\n\017CURREN"
    "TPLAYLIST\020\005*\037\n\007Version\022\024\n\020PROTOCOL_VERSI"
    "ON\020\000*D\n\013PlayerState\022\013\n\007STOPPED\020\000\022\013\n\007PLAY"
    "ING\020\001\022\017\n\013FASTFORWARD\020\002\022\n\n\006REWIND\020\003", 1634);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "iTCH.proto", &protobuf_RegisterTypes);
  Hello::default_instance_ = new Hello();
  Envelope::default_instance_ = new Envelope();
  ClientRequest::default_instance_ = new ClientRequest();
  ClientRequest_Value::default_instance_ = new ClientRequest_Value();
  Track::default_instance_ = new Track();
  ServerStatus::default_instance_ = new ServerStatus();
  ServerStatus_Value::default_instance_ = new ServerStatus_Value();
  Hello::default_instance_->InitAsDefaultInstance();
  Envelope::default_instance_->InitAsDefaultInstance();
  ClientRequest::default_instance_->InitAsDefaultInstance();
  ClientRequest_Value::default_instance_->InitAsDefaultInstance();
  Track::default_instance_->InitAsDefaultInstance();
  ServerStatus::default_instance_->InitAsDefaultInstance();
  ServerStatus_Value::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_iTCH_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_iTCH_2eproto {
  StaticDescriptorInitializer_iTCH_2eproto() {
    protobuf_AddDesc_iTCH_2eproto();
  }
} static_descriptor_initializer_iTCH_2eproto_;

const ::google::protobuf::EnumDescriptor* Version_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Version_descriptor_;
}
bool Version_IsValid(int value) {
  switch(value) {
    case 0:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PlayerState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerState_descriptor_;
}
bool PlayerState_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int Hello::kVersionFieldNumber;
const int Hello::kHostnameFieldNumber;
const int Hello::kProgramNameFieldNumber;
const int Hello::kProgramVersionFieldNumber;
#endif  // !_MSC_VER

Hello::Hello()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Hello::InitAsDefaultInstance() {
}

Hello::Hello(const Hello& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Hello::SharedCtor() {
  _cached_size_ = 0;
  version_ = 0;
  hostname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  program_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  program_version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Hello::~Hello() {
  SharedDtor();
}

void Hello::SharedDtor() {
  if (hostname_ != &::google::protobuf::internal::kEmptyString) {
    delete hostname_;
  }
  if (program_name_ != &::google::protobuf::internal::kEmptyString) {
    delete program_name_;
  }
  if (program_version_ != &::google::protobuf::internal::kEmptyString) {
    delete program_version_;
  }
  if (this != default_instance_) {
  }
}

void Hello::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Hello::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Hello_descriptor_;
}

const Hello& Hello::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_iTCH_2eproto();  return *default_instance_;
}

Hello* Hello::default_instance_ = NULL;

Hello* Hello::New() const {
  return new Hello;
}

void Hello::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    version_ = 0;
    if (has_hostname()) {
      if (hostname_ != &::google::protobuf::internal::kEmptyString) {
        hostname_->clear();
      }
    }
    if (has_program_name()) {
      if (program_name_ != &::google::protobuf::internal::kEmptyString) {
        program_name_->clear();
      }
    }
    if (has_program_version()) {
      if (program_version_ != &::google::protobuf::internal::kEmptyString) {
        program_version_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Hello::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .iTCH.Version version = 1 [default = PROTOCOL_VERSION];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (iTCH::Version_IsValid(value)) {
            set_version(static_cast< iTCH::Version >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_hostname;
        break;
      }
      
      // optional string hostname = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hostname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hostname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->hostname().data(), this->hostname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_program_name;
        break;
      }
      
      // optional string program_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_program_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_program_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->program_name().data(), this->program_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_program_version;
        break;
      }
      
      // optional string program_version = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_program_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_program_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->program_version().data(), this->program_version().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Hello::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .iTCH.Version version = 1 [default = PROTOCOL_VERSION];
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->version(), output);
  }
  
  // optional string hostname = 2;
  if (has_hostname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hostname().data(), this->hostname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->hostname(), output);
  }
  
  // optional string program_name = 3;
  if (has_program_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->program_name().data(), this->program_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->program_name(), output);
  }
  
  // optional string program_version = 4;
  if (has_program_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->program_version().data(), this->program_version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->program_version(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Hello::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .iTCH.Version version = 1 [default = PROTOCOL_VERSION];
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->version(), target);
  }
  
  // optional string hostname = 2;
  if (has_hostname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hostname().data(), this->hostname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->hostname(), target);
  }
  
  // optional string program_name = 3;
  if (has_program_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->program_name().data(), this->program_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->program_name(), target);
  }
  
  // optional string program_version = 4;
  if (has_program_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->program_version().data(), this->program_version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->program_version(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Hello::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .iTCH.Version version = 1 [default = PROTOCOL_VERSION];
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->version());
    }
    
    // optional string hostname = 2;
    if (has_hostname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hostname());
    }
    
    // optional string program_name = 3;
    if (has_program_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->program_name());
    }
    
    // optional string program_version = 4;
    if (has_program_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->program_version());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Hello::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Hello* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Hello*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Hello::MergeFrom(const Hello& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_hostname()) {
      set_hostname(from.hostname());
    }
    if (from.has_program_name()) {
      set_program_name(from.program_name());
    }
    if (from.has_program_version()) {
      set_program_version(from.program_version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Hello::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Hello::CopyFrom(const Hello& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Hello::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void Hello::Swap(Hello* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    std::swap(hostname_, other->hostname_);
    std::swap(program_name_, other->program_name_);
    std::swap(program_version_, other->program_version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Hello::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Hello_descriptor_;
  metadata.reflection = Hello_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Envelope_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Envelope_Type_descriptor_;
}
bool Envelope_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Envelope_Type Envelope::CLIENTREQUEST;
const Envelope_Type Envelope::SERVERSTATUS;
const Envelope_Type Envelope::Type_MIN;
const Envelope_Type Envelope::Type_MAX;
const int Envelope::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Envelope::kTypeFieldNumber;
const int Envelope::kRequestFieldNumber;
const int Envelope::kStatusFieldNumber;
#endif  // !_MSC_VER

Envelope::Envelope()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Envelope::InitAsDefaultInstance() {
  request_ = const_cast< ::iTCH::ClientRequest*>(&::iTCH::ClientRequest::default_instance());
  status_ = const_cast< ::iTCH::ServerStatus*>(&::iTCH::ServerStatus::default_instance());
}

Envelope::Envelope(const Envelope& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Envelope::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  request_ = NULL;
  status_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Envelope::~Envelope() {
  SharedDtor();
}

void Envelope::SharedDtor() {
  if (this != default_instance_) {
    delete request_;
    delete status_;
  }
}

void Envelope::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Envelope::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Envelope_descriptor_;
}

const Envelope& Envelope::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_iTCH_2eproto();  return *default_instance_;
}

Envelope* Envelope::default_instance_ = NULL;

Envelope* Envelope::New() const {
  return new Envelope;
}

void Envelope::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    if (has_request()) {
      if (request_ != NULL) request_->::iTCH::ClientRequest::Clear();
    }
    if (has_status()) {
      if (status_ != NULL) status_->::iTCH::ServerStatus::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Envelope::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .iTCH.Envelope.Type type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::iTCH::Envelope_Type_IsValid(value)) {
            set_type(static_cast< ::iTCH::Envelope_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_request;
        break;
      }
      
      // optional .iTCH.ClientRequest request = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_request()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_status;
        break;
      }
      
      // optional .iTCH.ServerStatus status = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_status()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Envelope::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .iTCH.Envelope.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }
  
  // optional .iTCH.ClientRequest request = 2;
  if (has_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->request(), output);
  }
  
  // optional .iTCH.ServerStatus status = 3;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->status(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Envelope::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .iTCH.Envelope.Type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }
  
  // optional .iTCH.ClientRequest request = 2;
  if (has_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->request(), target);
  }
  
  // optional .iTCH.ServerStatus status = 3;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->status(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Envelope::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .iTCH.Envelope.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
    // optional .iTCH.ClientRequest request = 2;
    if (has_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->request());
    }
    
    // optional .iTCH.ServerStatus status = 3;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->status());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Envelope::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Envelope* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Envelope*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Envelope::MergeFrom(const Envelope& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_request()) {
      mutable_request()->::iTCH::ClientRequest::MergeFrom(from.request());
    }
    if (from.has_status()) {
      mutable_status()->::iTCH::ServerStatus::MergeFrom(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Envelope::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Envelope::CopyFrom(const Envelope& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Envelope::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_request()) {
    if (!this->request().IsInitialized()) return false;
  }
  if (has_status()) {
    if (!this->status().IsInitialized()) return false;
  }
  return true;
}

void Envelope::Swap(Envelope* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(request_, other->request_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Envelope::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Envelope_descriptor_;
  metadata.reflection = Envelope_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ClientRequest_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientRequest_Type_descriptor_;
}
bool ClientRequest_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ClientRequest_Type ClientRequest::BACKTRACK;
const ClientRequest_Type ClientRequest::FASTFORWARD;
const ClientRequest_Type ClientRequest::NEXTTRACK;
const ClientRequest_Type ClientRequest::PAUSE;
const ClientRequest_Type ClientRequest::PLAY;
const ClientRequest_Type ClientRequest::PLAYPAUSE;
const ClientRequest_Type ClientRequest::PREVIOUSTRACK;
const ClientRequest_Type ClientRequest::RESUME;
const ClientRequest_Type ClientRequest::REWIND;
const ClientRequest_Type ClientRequest::STOP;
const ClientRequest_Type ClientRequest::GET_SOUNDVOLUME;
const ClientRequest_Type ClientRequest::PUT_SOUNDVOLUME;
const ClientRequest_Type ClientRequest::GET_MUTE;
const ClientRequest_Type ClientRequest::PUT_MUTE;
const ClientRequest_Type ClientRequest::GET_PLAYERPOSITION;
const ClientRequest_Type ClientRequest::PUT_PLAYERPOSITION;
const ClientRequest_Type ClientRequest::GET_PLAYERSTATE;
const ClientRequest_Type ClientRequest::GET_CURRENTTRACK;
const ClientRequest_Type ClientRequest::GET_CURRENTPLAYLIST;
const ClientRequest_Type ClientRequest::Type_MIN;
const ClientRequest_Type ClientRequest::Type_MAX;
const int ClientRequest::Type_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* ClientRequest_Value_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientRequest_Value_Type_descriptor_;
}
bool ClientRequest_Value_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ClientRequest_Value_Type ClientRequest_Value::VOLUME;
const ClientRequest_Value_Type ClientRequest_Value::MUTE;
const ClientRequest_Value_Type ClientRequest_Value::POSITION;
const ClientRequest_Value_Type ClientRequest_Value::Type_MIN;
const ClientRequest_Value_Type ClientRequest_Value::Type_MAX;
const int ClientRequest_Value::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ClientRequest_Value::kTypeFieldNumber;
const int ClientRequest_Value::kVolumeFieldNumber;
const int ClientRequest_Value::kMuteFieldNumber;
const int ClientRequest_Value::kPositionFieldNumber;
#endif  // !_MSC_VER

ClientRequest_Value::ClientRequest_Value()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClientRequest_Value::InitAsDefaultInstance() {
}

ClientRequest_Value::ClientRequest_Value(const ClientRequest_Value& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClientRequest_Value::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  volume_ = 0u;
  mute_ = false;
  position_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientRequest_Value::~ClientRequest_Value() {
  SharedDtor();
}

void ClientRequest_Value::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClientRequest_Value::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientRequest_Value::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientRequest_Value_descriptor_;
}

const ClientRequest_Value& ClientRequest_Value::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_iTCH_2eproto();  return *default_instance_;
}

ClientRequest_Value* ClientRequest_Value::default_instance_ = NULL;

ClientRequest_Value* ClientRequest_Value::New() const {
  return new ClientRequest_Value;
}

void ClientRequest_Value::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    volume_ = 0u;
    mute_ = false;
    position_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientRequest_Value::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .iTCH.ClientRequest.Value.Type type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::iTCH::ClientRequest_Value_Type_IsValid(value)) {
            set_type(static_cast< ::iTCH::ClientRequest_Value_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_volume;
        break;
      }
      
      // optional uint32 volume = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_volume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &volume_)));
          set_has_volume();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_mute;
        break;
      }
      
      // optional bool mute = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mute:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &mute_)));
          set_has_mute();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_position;
        break;
      }
      
      // optional uint32 position = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_position:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &position_)));
          set_has_position();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClientRequest_Value::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .iTCH.ClientRequest.Value.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }
  
  // optional uint32 volume = 2;
  if (has_volume()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->volume(), output);
  }
  
  // optional bool mute = 3;
  if (has_mute()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->mute(), output);
  }
  
  // optional uint32 position = 4;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->position(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClientRequest_Value::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .iTCH.ClientRequest.Value.Type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }
  
  // optional uint32 volume = 2;
  if (has_volume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->volume(), target);
  }
  
  // optional bool mute = 3;
  if (has_mute()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->mute(), target);
  }
  
  // optional uint32 position = 4;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->position(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClientRequest_Value::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .iTCH.ClientRequest.Value.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
    // optional uint32 volume = 2;
    if (has_volume()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->volume());
    }
    
    // optional bool mute = 3;
    if (has_mute()) {
      total_size += 1 + 1;
    }
    
    // optional uint32 position = 4;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->position());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientRequest_Value::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientRequest_Value* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientRequest_Value*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientRequest_Value::MergeFrom(const ClientRequest_Value& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_volume()) {
      set_volume(from.volume());
    }
    if (from.has_mute()) {
      set_mute(from.mute());
    }
    if (from.has_position()) {
      set_position(from.position());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientRequest_Value::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientRequest_Value::CopyFrom(const ClientRequest_Value& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientRequest_Value::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void ClientRequest_Value::Swap(ClientRequest_Value* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(volume_, other->volume_);
    std::swap(mute_, other->mute_);
    std::swap(position_, other->position_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientRequest_Value::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientRequest_Value_descriptor_;
  metadata.reflection = ClientRequest_Value_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ClientRequest::kSeqidFieldNumber;
const int ClientRequest::kTypeFieldNumber;
const int ClientRequest::kValueFieldNumber;
#endif  // !_MSC_VER

ClientRequest::ClientRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClientRequest::InitAsDefaultInstance() {
  value_ = const_cast< ::iTCH::ClientRequest_Value*>(&::iTCH::ClientRequest_Value::default_instance());
}

ClientRequest::ClientRequest(const ClientRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClientRequest::SharedCtor() {
  _cached_size_ = 0;
  seqid_ = 0u;
  type_ = 0;
  value_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientRequest::~ClientRequest() {
  SharedDtor();
}

void ClientRequest::SharedDtor() {
  if (this != default_instance_) {
    delete value_;
  }
}

void ClientRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientRequest_descriptor_;
}

const ClientRequest& ClientRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_iTCH_2eproto();  return *default_instance_;
}

ClientRequest* ClientRequest::default_instance_ = NULL;

ClientRequest* ClientRequest::New() const {
  return new ClientRequest;
}

void ClientRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seqid_ = 0u;
    type_ = 0;
    if (has_value()) {
      if (value_ != NULL) value_->::iTCH::ClientRequest_Value::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 seqid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seqid_)));
          set_has_seqid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }
      
      // required .iTCH.ClientRequest.Type type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::iTCH::ClientRequest_Type_IsValid(value)) {
            set_type(static_cast< ::iTCH::ClientRequest_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_value;
        break;
      }
      
      // optional .iTCH.ClientRequest.Value value = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClientRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 seqid = 1;
  if (has_seqid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->seqid(), output);
  }
  
  // required .iTCH.ClientRequest.Type type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }
  
  // optional .iTCH.ClientRequest.Value value = 3;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->value(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClientRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 seqid = 1;
  if (has_seqid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->seqid(), target);
  }
  
  // required .iTCH.ClientRequest.Type type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }
  
  // optional .iTCH.ClientRequest.Value value = 3;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->value(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClientRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 seqid = 1;
    if (has_seqid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seqid());
    }
    
    // required .iTCH.ClientRequest.Type type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
    // optional .iTCH.ClientRequest.Value value = 3;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->value());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientRequest::MergeFrom(const ClientRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seqid()) {
      set_seqid(from.seqid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_value()) {
      mutable_value()->::iTCH::ClientRequest_Value::MergeFrom(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientRequest::CopyFrom(const ClientRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_value()) {
    if (!this->value().IsInitialized()) return false;
  }
  return true;
}

void ClientRequest::Swap(ClientRequest* other) {
  if (other != this) {
    std::swap(seqid_, other->seqid_);
    std::swap(type_, other->type_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientRequest_descriptor_;
  metadata.reflection = ClientRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Track::kNameFieldNumber;
const int Track::kArtistFieldNumber;
const int Track::kAlbumFieldNumber;
const int Track::kDurationFieldNumber;
const int Track::kGenreFieldNumber;
const int Track::kYearFieldNumber;
const int Track::kBitrateFieldNumber;
const int Track::kSampleRateFieldNumber;
const int Track::kCommentFieldNumber;
const int Track::kKindFieldNumber;
#endif  // !_MSC_VER

Track::Track()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Track::InitAsDefaultInstance() {
}

Track::Track(const Track& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Track::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  artist_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  album_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  duration_ = 0u;
  genre_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  year_ = 0u;
  bitrate_ = 0u;
  sample_rate_ = 0u;
  comment_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  kind_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Track::~Track() {
  SharedDtor();
}

void Track::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (artist_ != &::google::protobuf::internal::kEmptyString) {
    delete artist_;
  }
  if (album_ != &::google::protobuf::internal::kEmptyString) {
    delete album_;
  }
  if (genre_ != &::google::protobuf::internal::kEmptyString) {
    delete genre_;
  }
  if (comment_ != &::google::protobuf::internal::kEmptyString) {
    delete comment_;
  }
  if (kind_ != &::google::protobuf::internal::kEmptyString) {
    delete kind_;
  }
  if (this != default_instance_) {
  }
}

void Track::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Track::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Track_descriptor_;
}

const Track& Track::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_iTCH_2eproto();  return *default_instance_;
}

Track* Track::default_instance_ = NULL;

Track* Track::New() const {
  return new Track;
}

void Track::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_artist()) {
      if (artist_ != &::google::protobuf::internal::kEmptyString) {
        artist_->clear();
      }
    }
    if (has_album()) {
      if (album_ != &::google::protobuf::internal::kEmptyString) {
        album_->clear();
      }
    }
    duration_ = 0u;
    if (has_genre()) {
      if (genre_ != &::google::protobuf::internal::kEmptyString) {
        genre_->clear();
      }
    }
    year_ = 0u;
    bitrate_ = 0u;
    sample_rate_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_comment()) {
      if (comment_ != &::google::protobuf::internal::kEmptyString) {
        comment_->clear();
      }
    }
    if (has_kind()) {
      if (kind_ != &::google::protobuf::internal::kEmptyString) {
        kind_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Track::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_artist;
        break;
      }
      
      // required string artist = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_artist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_artist()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->artist().data(), this->artist().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_album;
        break;
      }
      
      // required string album = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_album:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_album()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->album().data(), this->album().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_duration;
        break;
      }
      
      // required uint32 duration = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &duration_)));
          set_has_duration();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_genre;
        break;
      }
      
      // required string genre = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_genre:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_genre()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->genre().data(), this->genre().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_year;
        break;
      }
      
      // required uint32 year = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_year:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &year_)));
          set_has_year();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_bitrate;
        break;
      }
      
      // optional uint32 bitrate = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bitrate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bitrate_)));
          set_has_bitrate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_sample_rate;
        break;
      }
      
      // optional uint32 sample_rate = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sample_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sample_rate_)));
          set_has_sample_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_comment;
        break;
      }
      
      // optional string comment = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_comment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_comment()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->comment().data(), this->comment().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_kind;
        break;
      }
      
      // optional string kind = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_kind:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_kind()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->kind().data(), this->kind().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Track::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }
  
  // required string artist = 2;
  if (has_artist()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->artist().data(), this->artist().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->artist(), output);
  }
  
  // required string album = 3;
  if (has_album()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->album().data(), this->album().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->album(), output);
  }
  
  // required uint32 duration = 4;
  if (has_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->duration(), output);
  }
  
  // required string genre = 5;
  if (has_genre()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->genre().data(), this->genre().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->genre(), output);
  }
  
  // required uint32 year = 6;
  if (has_year()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->year(), output);
  }
  
  // optional uint32 bitrate = 7;
  if (has_bitrate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->bitrate(), output);
  }
  
  // optional uint32 sample_rate = 8;
  if (has_sample_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->sample_rate(), output);
  }
  
  // optional string comment = 9;
  if (has_comment()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->comment().data(), this->comment().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->comment(), output);
  }
  
  // optional string kind = 10;
  if (has_kind()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->kind().data(), this->kind().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->kind(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Track::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }
  
  // required string artist = 2;
  if (has_artist()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->artist().data(), this->artist().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->artist(), target);
  }
  
  // required string album = 3;
  if (has_album()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->album().data(), this->album().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->album(), target);
  }
  
  // required uint32 duration = 4;
  if (has_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->duration(), target);
  }
  
  // required string genre = 5;
  if (has_genre()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->genre().data(), this->genre().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->genre(), target);
  }
  
  // required uint32 year = 6;
  if (has_year()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->year(), target);
  }
  
  // optional uint32 bitrate = 7;
  if (has_bitrate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->bitrate(), target);
  }
  
  // optional uint32 sample_rate = 8;
  if (has_sample_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->sample_rate(), target);
  }
  
  // optional string comment = 9;
  if (has_comment()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->comment().data(), this->comment().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->comment(), target);
  }
  
  // optional string kind = 10;
  if (has_kind()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->kind().data(), this->kind().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->kind(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Track::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // required string artist = 2;
    if (has_artist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->artist());
    }
    
    // required string album = 3;
    if (has_album()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->album());
    }
    
    // required uint32 duration = 4;
    if (has_duration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->duration());
    }
    
    // required string genre = 5;
    if (has_genre()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->genre());
    }
    
    // required uint32 year = 6;
    if (has_year()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->year());
    }
    
    // optional uint32 bitrate = 7;
    if (has_bitrate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bitrate());
    }
    
    // optional uint32 sample_rate = 8;
    if (has_sample_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sample_rate());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string comment = 9;
    if (has_comment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->comment());
    }
    
    // optional string kind = 10;
    if (has_kind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->kind());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Track::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Track* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Track*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Track::MergeFrom(const Track& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_artist()) {
      set_artist(from.artist());
    }
    if (from.has_album()) {
      set_album(from.album());
    }
    if (from.has_duration()) {
      set_duration(from.duration());
    }
    if (from.has_genre()) {
      set_genre(from.genre());
    }
    if (from.has_year()) {
      set_year(from.year());
    }
    if (from.has_bitrate()) {
      set_bitrate(from.bitrate());
    }
    if (from.has_sample_rate()) {
      set_sample_rate(from.sample_rate());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_comment()) {
      set_comment(from.comment());
    }
    if (from.has_kind()) {
      set_kind(from.kind());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Track::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Track::CopyFrom(const Track& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Track::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  
  return true;
}

void Track::Swap(Track* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(artist_, other->artist_);
    std::swap(album_, other->album_);
    std::swap(duration_, other->duration_);
    std::swap(genre_, other->genre_);
    std::swap(year_, other->year_);
    std::swap(bitrate_, other->bitrate_);
    std::swap(sample_rate_, other->sample_rate_);
    std::swap(comment_, other->comment_);
    std::swap(kind_, other->kind_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Track::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Track_descriptor_;
  metadata.reflection = Track_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ServerStatus_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerStatus_Type_descriptor_;
}
bool ServerStatus_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ServerStatus_Type ServerStatus::SOUNDVOLUME;
const ServerStatus_Type ServerStatus::MUTE;
const ServerStatus_Type ServerStatus::PLAYERPOSITION;
const ServerStatus_Type ServerStatus::PLAYERSTATE;
const ServerStatus_Type ServerStatus::CURRENTTRACK;
const ServerStatus_Type ServerStatus::CURRENTPLAYLIST;
const ServerStatus_Type ServerStatus::Type_MIN;
const ServerStatus_Type ServerStatus::Type_MAX;
const int ServerStatus::Type_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* ServerStatus_Value_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerStatus_Value_Type_descriptor_;
}
bool ServerStatus_Value_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ServerStatus_Value_Type ServerStatus_Value::VOLUME;
const ServerStatus_Value_Type ServerStatus_Value::MUTE;
const ServerStatus_Value_Type ServerStatus_Value::POSITION;
const ServerStatus_Value_Type ServerStatus_Value::STATE;
const ServerStatus_Value_Type ServerStatus_Value::TRACK;
const ServerStatus_Value_Type ServerStatus_Value::Type_MIN;
const ServerStatus_Value_Type ServerStatus_Value::Type_MAX;
const int ServerStatus_Value::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ServerStatus_Value::kTypeFieldNumber;
const int ServerStatus_Value::kVolumeFieldNumber;
const int ServerStatus_Value::kMuteFieldNumber;
const int ServerStatus_Value::kPositionFieldNumber;
const int ServerStatus_Value::kStateFieldNumber;
const int ServerStatus_Value::kTrackFieldNumber;
#endif  // !_MSC_VER

ServerStatus_Value::ServerStatus_Value()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ServerStatus_Value::InitAsDefaultInstance() {
}

ServerStatus_Value::ServerStatus_Value(const ServerStatus_Value& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ServerStatus_Value::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  volume_ = 0u;
  mute_ = false;
  position_ = 0u;
  state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerStatus_Value::~ServerStatus_Value() {
  SharedDtor();
}

void ServerStatus_Value::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ServerStatus_Value::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerStatus_Value::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerStatus_Value_descriptor_;
}

const ServerStatus_Value& ServerStatus_Value::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_iTCH_2eproto();  return *default_instance_;
}

ServerStatus_Value* ServerStatus_Value::default_instance_ = NULL;

ServerStatus_Value* ServerStatus_Value::New() const {
  return new ServerStatus_Value;
}

void ServerStatus_Value::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    volume_ = 0u;
    mute_ = false;
    position_ = 0u;
    state_ = 0;
  }
  track_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServerStatus_Value::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .iTCH.ServerStatus.Value.Type type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::iTCH::ServerStatus_Value_Type_IsValid(value)) {
            set_type(static_cast< ::iTCH::ServerStatus_Value_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_volume;
        break;
      }
      
      // optional uint32 volume = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_volume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &volume_)));
          set_has_volume();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_mute;
        break;
      }
      
      // optional bool mute = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mute:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &mute_)));
          set_has_mute();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_position;
        break;
      }
      
      // optional uint32 position = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_position:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &position_)));
          set_has_position();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_state;
        break;
      }
      
      // optional .iTCH.PlayerState state = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (iTCH::PlayerState_IsValid(value)) {
            set_state(static_cast< iTCH::PlayerState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_track;
        break;
      }
      
      // repeated .iTCH.Track track = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_track:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_track()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_track;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ServerStatus_Value::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .iTCH.ServerStatus.Value.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }
  
  // optional uint32 volume = 2;
  if (has_volume()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->volume(), output);
  }
  
  // optional bool mute = 3;
  if (has_mute()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->mute(), output);
  }
  
  // optional uint32 position = 4;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->position(), output);
  }
  
  // optional .iTCH.PlayerState state = 5;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->state(), output);
  }
  
  // repeated .iTCH.Track track = 6;
  for (int i = 0; i < this->track_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->track(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ServerStatus_Value::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .iTCH.ServerStatus.Value.Type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }
  
  // optional uint32 volume = 2;
  if (has_volume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->volume(), target);
  }
  
  // optional bool mute = 3;
  if (has_mute()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->mute(), target);
  }
  
  // optional uint32 position = 4;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->position(), target);
  }
  
  // optional .iTCH.PlayerState state = 5;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->state(), target);
  }
  
  // repeated .iTCH.Track track = 6;
  for (int i = 0; i < this->track_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->track(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ServerStatus_Value::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .iTCH.ServerStatus.Value.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
    // optional uint32 volume = 2;
    if (has_volume()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->volume());
    }
    
    // optional bool mute = 3;
    if (has_mute()) {
      total_size += 1 + 1;
    }
    
    // optional uint32 position = 4;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->position());
    }
    
    // optional .iTCH.PlayerState state = 5;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }
    
  }
  // repeated .iTCH.Track track = 6;
  total_size += 1 * this->track_size();
  for (int i = 0; i < this->track_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->track(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerStatus_Value::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServerStatus_Value* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServerStatus_Value*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServerStatus_Value::MergeFrom(const ServerStatus_Value& from) {
  GOOGLE_CHECK_NE(&from, this);
  track_.MergeFrom(from.track_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_volume()) {
      set_volume(from.volume());
    }
    if (from.has_mute()) {
      set_mute(from.mute());
    }
    if (from.has_position()) {
      set_position(from.position());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServerStatus_Value::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerStatus_Value::CopyFrom(const ServerStatus_Value& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerStatus_Value::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < track_size(); i++) {
    if (!this->track(i).IsInitialized()) return false;
  }
  return true;
}

void ServerStatus_Value::Swap(ServerStatus_Value* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(volume_, other->volume_);
    std::swap(mute_, other->mute_);
    std::swap(position_, other->position_);
    std::swap(state_, other->state_);
    track_.Swap(&other->track_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServerStatus_Value::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerStatus_Value_descriptor_;
  metadata.reflection = ServerStatus_Value_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ServerStatus::kTypeFieldNumber;
const int ServerStatus::kSeqidFieldNumber;
const int ServerStatus::kValueFieldNumber;
#endif  // !_MSC_VER

ServerStatus::ServerStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ServerStatus::InitAsDefaultInstance() {
  value_ = const_cast< ::iTCH::ServerStatus_Value*>(&::iTCH::ServerStatus_Value::default_instance());
}

ServerStatus::ServerStatus(const ServerStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ServerStatus::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  seqid_ = 0u;
  value_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerStatus::~ServerStatus() {
  SharedDtor();
}

void ServerStatus::SharedDtor() {
  if (this != default_instance_) {
    delete value_;
  }
}

void ServerStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerStatus_descriptor_;
}

const ServerStatus& ServerStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_iTCH_2eproto();  return *default_instance_;
}

ServerStatus* ServerStatus::default_instance_ = NULL;

ServerStatus* ServerStatus::New() const {
  return new ServerStatus;
}

void ServerStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    seqid_ = 0u;
    if (has_value()) {
      if (value_ != NULL) value_->::iTCH::ServerStatus_Value::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServerStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .iTCH.ServerStatus.Type type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::iTCH::ServerStatus_Type_IsValid(value)) {
            set_type(static_cast< ::iTCH::ServerStatus_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_seqid;
        break;
      }
      
      // required uint32 seqid = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seqid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seqid_)));
          set_has_seqid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_value;
        break;
      }
      
      // required .iTCH.ServerStatus.Value value = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ServerStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .iTCH.ServerStatus.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }
  
  // required uint32 seqid = 2 [default = 0];
  if (has_seqid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->seqid(), output);
  }
  
  // required .iTCH.ServerStatus.Value value = 3;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->value(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ServerStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .iTCH.ServerStatus.Type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }
  
  // required uint32 seqid = 2 [default = 0];
  if (has_seqid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->seqid(), target);
  }
  
  // required .iTCH.ServerStatus.Value value = 3;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->value(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ServerStatus::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .iTCH.ServerStatus.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
    // required uint32 seqid = 2 [default = 0];
    if (has_seqid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seqid());
    }
    
    // required .iTCH.ServerStatus.Value value = 3;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->value());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServerStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServerStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServerStatus::MergeFrom(const ServerStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_seqid()) {
      set_seqid(from.seqid());
    }
    if (from.has_value()) {
      mutable_value()->::iTCH::ServerStatus_Value::MergeFrom(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServerStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerStatus::CopyFrom(const ServerStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerStatus::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  if (has_value()) {
    if (!this->value().IsInitialized()) return false;
  }
  return true;
}

void ServerStatus::Swap(ServerStatus* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(seqid_, other->seqid_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServerStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerStatus_descriptor_;
  metadata.reflection = ServerStatus_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace iTCH

// @@protoc_insertion_point(global_scope)
